import { Request, Response, NextFunction } from 'express';
import { StatusCodes } from 'http-status-codes';
import { Product } from '../models/products';
import { Category } from '../models/category';
import { CustomError } from '../middleware/errorHandler';

export const addProduct = async (req: Request, res: Response, next: NextFunction) => {
    try {
        const product = new Product(req.body);
        await product.save();
        res.status(StatusCodes.CREATED).json(product);
    } catch (error) {
        next(new CustomError(StatusCodes.INTERNAL_SERVER_ERROR, 'Unable to add product'));
    }
};

export const updateProduct = async (req: Request, res: Response, next: NextFunction) => {
    try {
        const product = await Product.findByIdAndUpdate(req.params.id, req.body, { new: true });
        res.status(StatusCodes.OK).json(product);
    } catch (error) {
        next(new CustomError(StatusCodes.INTERNAL_SERVER_ERROR, 'Unable to update product'));
    }
};

export const deleteProduct = async (req: Request, res: Response, next: NextFunction) => {
    try {
        const product = await Product.findByIdAndDelete(req.params.id);
        res.status(StatusCodes.OK).json(product);
    } catch (error) {
        next(new CustomError(StatusCodes.INTERNAL_SERVER_ERROR, 'Unable to delete product'));
    }
};

//ChangÃ©es avec Expert 

export const updateProductRating = async (req: Request, res: Response, next: NextFunction) => {
    try {
        const product = await Product.findById(req.params.id);
        if (!product) return next(new CustomError(StatusCodes.NOT_FOUND, 'Product not found'));

        product.updateRating(req.body.rating);
        await product.save();

        res.status(StatusCodes.OK).json(product);
    } catch (error) {
        next(new CustomError(StatusCodes.INTERNAL_SERVER_ERROR, 'Unable to update rating'));
    }
};

export const updateProductAfterSelling = async (req: Request, res: Response, next: NextFunction) => {
    try {
        const { id } = req.params;
        const { quantity } = req.body;
        const product = await Product.findById(id);

        if (!product) return next(new CustomError(StatusCodes.NOT_FOUND, 'Product not found'));

        product.totalRevenue += product.calculateRevenue(quantity);
        product.quantity -= quantity;
        await product.save();

        res.status(StatusCodes.OK).json({ message: 'Product updated', product });
    } catch (error) {
        next(new CustomError(StatusCodes.INTERNAL_SERVER_ERROR, 'Error updating product after sale'));
    }
};

export const updateProductStatus = async (req: Request, res: Response, next: NextFunction) => {
    try {
        const product = await Product.findById(req.params.id);
        if (!product) return res.status(StatusCodes.NOT_FOUND).json({ message: 'Product not found' });

        product.toggleStatus();
        await product.save();

        res.status(StatusCodes.OK).json(product);
    } catch (error) {
        next(new CustomError(StatusCodes.INTERNAL_SERVER_ERROR, 'Error toggling product status'));
    }
};


export const getProducts = async (_req: Request, res: Response, next: NextFunction) => {
    try {
        const products = await Product.find();
        res.status(StatusCodes.OK).json(products);
    } catch (error) {
        next(new CustomError(StatusCodes.INTERNAL_SERVER_ERROR, 'Error fetching products'));
    }
};

export const getProductById = async (req: Request, res: Response, next: NextFunction) => {
    try {
        const product = await Product.findById(req.params.id);
        res.status(StatusCodes.OK).json(product);
    } catch (error) {
        next(new CustomError(StatusCodes.INTERNAL_SERVER_ERROR, 'Error fetching product by ID'));
    }
};
